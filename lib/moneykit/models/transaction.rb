# #MoneyKit API
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 0.1.0
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require 'date'
require 'time'

module MoneyKit
  class Transaction
    # The unique ID for this transaction.
    attr_accessor :transaction_id

    # The ID of the account in which this transaction occurred.
    attr_accessor :account_id

    # The amount of this transaction, denominated in account currency.  This amount is always         non-negative.  The `type` field indicates whether it is entering or leaving the account.
    attr_accessor :amount

    attr_accessor :type

    # The ISO-4217 currency code of the transaction.
    attr_accessor :currency

    # The effective (posted) date the transaction, in ISO-8601 format.  For pending transactions,             this date is when the transaction was initiated.
    attr_accessor :date

    # A normalized, cleaned transaction description suitable for presentation to the end user.             Commonly this will be the merchant or counterparty name.
    attr_accessor :description

    # The raw transaction description as provided by the institution, where available.
    attr_accessor :raw_description

    # If true, this transaction is pending or unsettled and has not yet affected the account.         Commonly these are credit card transactions, particularly approvals (holds) such as for hotel or restaurant         reservations placed in advance where the final amount is still to be determined.
    attr_accessor :pending

    # The category for this transaction, given as a dotted string indicating a hierarchical         categorization.  See <a href=/pages/categories>Transaction Categories</a> for the list of possible transaction types.
    attr_accessor :category

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'transaction_id': :transaction_id,
        'account_id': :account_id,
        'amount': :amount,
        'type': :type,
        'currency': :currency,
        'date': :date,
        'description': :description,
        'raw_description': :raw_description,
        'pending': :pending,
        'category': :category
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'transaction_id': :String,
        'account_id': :String,
        'amount': :String,
        'type': :TransactionType,
        'currency': :String,
        'date': :Date,
        'description': :String,
        'raw_description': :String,
        'pending': :Boolean,
        'category': :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                description
                raw_description
                category
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `MoneyKit::Transaction` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `MoneyKit::Transaction`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.transaction_id = attributes[:transaction_id] if attributes.key?(:transaction_id)

      self.account_id = attributes[:account_id] if attributes.key?(:account_id)

      self.amount = attributes[:amount] if attributes.key?(:amount)

      self.type = attributes[:type] if attributes.key?(:type)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.date = attributes[:date] if attributes.key?(:date)

      self.description = attributes[:description] if attributes.key?(:description)

      self.raw_description = attributes[:raw_description] if attributes.key?(:raw_description)

      self.pending = attributes[:pending] if attributes.key?(:pending)

      return unless attributes.key?(:category)

      self.category = attributes[:category]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      if @transaction_id.nil?
        invalid_properties.push('invalid value for "transaction_id", transaction_id cannot be nil.')
      end

      invalid_properties.push('invalid value for "account_id", account_id cannot be nil.') if @account_id.nil?

      invalid_properties.push('invalid value for "amount", amount cannot be nil.') if @amount.nil?

      invalid_properties.push('invalid value for "type", type cannot be nil.') if @type.nil?

      invalid_properties.push('invalid value for "currency", currency cannot be nil.') if @currency.nil?

      invalid_properties.push('invalid value for "date", date cannot be nil.') if @date.nil?

      invalid_properties.push('invalid value for "pending", pending cannot be nil.') if @pending.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @transaction_id.nil?
      return false if @account_id.nil?
      return false if @amount.nil?
      return false if @type.nil?
      return false if @currency.nil?
      return false if @date.nil?
      return false if @pending.nil?

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        transaction_id == other.transaction_id &&
        account_id == other.account_id &&
        amount == other.amount &&
        type == other.type &&
        currency == other.currency &&
        date == other.date &&
        description == other.description &&
        raw_description == other.raw_description &&
        pending == other.pending &&
        category == other.category
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transaction_id, account_id, amount, type, currency, date, description, raw_description, pending, category].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                              _deserialize(::Regexp.last_match(1), v)
                            end)
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MoneyKit.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
