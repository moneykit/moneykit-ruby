=begin
#MoneyKit API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-02-18

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module MoneyKit
  class LinkCommon
    # The unique ID for this link.
    attr_accessor :link_id

    # The unique ID for the institution this link is connected to.
    attr_accessor :institution_id

    # The institution name this link is connected to.
    attr_accessor :institution_name

    # An avatar image for the link's institution.
    attr_accessor :institution_avatar

    # The current state of this link.  Links that are not yet connected,         or which require reconnection, will be in one of the non-connected states.  Please note that recently deleted         links can be fetched by this function (and will have a state of `deleted`); however, MoneyKit completely         removes deleted links 90 days after deletion, so older deleted links will not be seen after this time.
    attr_accessor :state

    # The type of error, if the link is in the `error` state.  See <a href=/pages/errors>Errors</a> for an explanation of error codes.
    attr_accessor :error_code

    # (Deprecated) An ISO-8601 timestamp indicating the last time that the link was updated.
    attr_accessor :last_synced_at

    # The provider that most recently facilitated the creation of this link.  Note that         MoneyKit may switch providers if necessary to provide continuous access to the institution.  Not all providers         are automatically available or usable; provider selection is dynamic and depends on many factors.
    attr_accessor :provider

    # Arbitrary strings used to describe this link.
    attr_accessor :link_tags

    # DEPRECATED; use `link_tags` instead
    attr_accessor :tags

    # The webhook url assigned to this link.
    attr_accessor :webhook

    # The granted products available for this link.
    attr_accessor :products

    # A list of products that could be added to this link.         Products can be added to (and removed from) an existing link by creating a new <a href=#operation/create_link_session>link-session</a>         and supplying the `existing_link_id` with a new set of products.
    attr_accessor :available_products

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'link_id' => :'link_id',
        :'institution_id' => :'institution_id',
        :'institution_name' => :'institution_name',
        :'institution_avatar' => :'institution_avatar',
        :'state' => :'state',
        :'error_code' => :'error_code',
        :'last_synced_at' => :'last_synced_at',
        :'provider' => :'provider',
        :'link_tags' => :'link_tags',
        :'tags' => :'tags',
        :'webhook' => :'webhook',
        :'products' => :'products',
        :'available_products' => :'available_products'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'link_id' => :'String',
        :'institution_id' => :'String',
        :'institution_name' => :'String',
        :'institution_avatar' => :'String',
        :'state' => :'PublicLinkState',
        :'error_code' => :'PublicLinkError',
        :'last_synced_at' => :'Time',
        :'provider' => :'Provider',
        :'link_tags' => :'Array<String>',
        :'tags' => :'Array<String>',
        :'webhook' => :'String',
        :'products' => :'LinkProducts',
        :'available_products' => :'Array<Product>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MoneyKit::LinkCommon` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MoneyKit::LinkCommon`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'link_id')
        self.link_id = attributes[:'link_id']
      else
        self.link_id = nil
      end

      if attributes.key?(:'institution_id')
        self.institution_id = attributes[:'institution_id']
      else
        self.institution_id = nil
      end

      if attributes.key?(:'institution_name')
        self.institution_name = attributes[:'institution_name']
      else
        self.institution_name = nil
      end

      if attributes.key?(:'institution_avatar')
        self.institution_avatar = attributes[:'institution_avatar']
      else
        self.institution_avatar = nil
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      else
        self.state = nil
      end

      if attributes.key?(:'error_code')
        self.error_code = attributes[:'error_code']
      end

      if attributes.key?(:'last_synced_at')
        self.last_synced_at = attributes[:'last_synced_at']
      end

      if attributes.key?(:'provider')
        self.provider = attributes[:'provider']
      else
        self.provider = nil
      end

      if attributes.key?(:'link_tags')
        if (value = attributes[:'link_tags']).is_a?(Array)
          self.link_tags = value
        end
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'webhook')
        self.webhook = attributes[:'webhook']
      end

      if attributes.key?(:'products')
        self.products = attributes[:'products']
      else
        self.products = nil
      end

      if attributes.key?(:'available_products')
        if (value = attributes[:'available_products']).is_a?(Array)
          self.available_products = value
        end
      else
        self.available_products = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @link_id.nil?
        invalid_properties.push('invalid value for "link_id", link_id cannot be nil.')
      end

      if @institution_id.nil?
        invalid_properties.push('invalid value for "institution_id", institution_id cannot be nil.')
      end

      if @institution_name.nil?
        invalid_properties.push('invalid value for "institution_name", institution_name cannot be nil.')
      end

      if @institution_avatar.nil?
        invalid_properties.push('invalid value for "institution_avatar", institution_avatar cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @provider.nil?
        invalid_properties.push('invalid value for "provider", provider cannot be nil.')
      end

      if @products.nil?
        invalid_properties.push('invalid value for "products", products cannot be nil.')
      end

      if @available_products.nil?
        invalid_properties.push('invalid value for "available_products", available_products cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @link_id.nil?
      return false if @institution_id.nil?
      return false if @institution_name.nil?
      return false if @institution_avatar.nil?
      return false if @state.nil?
      return false if @provider.nil?
      return false if @products.nil?
      return false if @available_products.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] link_id Value to be assigned
    def link_id=(link_id)
      if link_id.nil?
        fail ArgumentError, 'link_id cannot be nil'
      end

      @link_id = link_id
    end

    # Custom attribute writer method with validation
    # @param [Object] institution_id Value to be assigned
    def institution_id=(institution_id)
      if institution_id.nil?
        fail ArgumentError, 'institution_id cannot be nil'
      end

      @institution_id = institution_id
    end

    # Custom attribute writer method with validation
    # @param [Object] institution_name Value to be assigned
    def institution_name=(institution_name)
      if institution_name.nil?
        fail ArgumentError, 'institution_name cannot be nil'
      end

      @institution_name = institution_name
    end

    # Custom attribute writer method with validation
    # @param [Object] institution_avatar Value to be assigned
    def institution_avatar=(institution_avatar)
      if institution_avatar.nil?
        fail ArgumentError, 'institution_avatar cannot be nil'
      end

      @institution_avatar = institution_avatar
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if state.nil?
        fail ArgumentError, 'state cannot be nil'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] provider Value to be assigned
    def provider=(provider)
      if provider.nil?
        fail ArgumentError, 'provider cannot be nil'
      end

      @provider = provider
    end

    # Custom attribute writer method with validation
    # @param [Object] products Value to be assigned
    def products=(products)
      if products.nil?
        fail ArgumentError, 'products cannot be nil'
      end

      @products = products
    end

    # Custom attribute writer method with validation
    # @param [Object] available_products Value to be assigned
    def available_products=(available_products)
      if available_products.nil?
        fail ArgumentError, 'available_products cannot be nil'
      end

      @available_products = available_products
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          link_id == o.link_id &&
          institution_id == o.institution_id &&
          institution_name == o.institution_name &&
          institution_avatar == o.institution_avatar &&
          state == o.state &&
          error_code == o.error_code &&
          last_synced_at == o.last_synced_at &&
          provider == o.provider &&
          link_tags == o.link_tags &&
          tags == o.tags &&
          webhook == o.webhook &&
          products == o.products &&
          available_products == o.available_products
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [link_id, institution_id, institution_name, institution_avatar, state, error_code, last_synced_at, provider, link_tags, tags, webhook, products, available_products].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        ::Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MoneyKit.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
