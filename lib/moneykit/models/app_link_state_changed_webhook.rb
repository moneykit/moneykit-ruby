=begin
#MoneyKit API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2023-02-18

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module MoneyKit
  class AppLinkStateChangedWebhook
    attr_accessor :webhook_major_version

    attr_accessor :webhook_minor_version

    attr_accessor :webhook_idempotency_key

    attr_accessor :webhook_timestamp

    attr_accessor :link_id

    attr_accessor :link_tags

    attr_accessor :webhook_event

    attr_accessor :state

    attr_accessor :error

    attr_accessor :error_message

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'webhook_major_version' => :'webhook_major_version',
        :'webhook_minor_version' => :'webhook_minor_version',
        :'webhook_idempotency_key' => :'webhook_idempotency_key',
        :'webhook_timestamp' => :'webhook_timestamp',
        :'link_id' => :'link_id',
        :'link_tags' => :'link_tags',
        :'webhook_event' => :'webhook_event',
        :'state' => :'state',
        :'error' => :'error',
        :'error_message' => :'error_message'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'webhook_major_version' => :'Integer',
        :'webhook_minor_version' => :'Integer',
        :'webhook_idempotency_key' => :'String',
        :'webhook_timestamp' => :'Time',
        :'link_id' => :'String',
        :'link_tags' => :'Array<String>',
        :'webhook_event' => :'String',
        :'state' => :'PublicLinkState',
        :'error' => :'PublicLinkError',
        :'error_message' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MoneyKit::AppLinkStateChangedWebhook` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MoneyKit::AppLinkStateChangedWebhook`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'webhook_major_version')
        self.webhook_major_version = attributes[:'webhook_major_version']
      else
        self.webhook_major_version = WEBHOOK_MAJOR_VERSION::N1
      end

      if attributes.key?(:'webhook_minor_version')
        self.webhook_minor_version = attributes[:'webhook_minor_version']
      else
        self.webhook_minor_version = WEBHOOK_MINOR_VERSION::N0
      end

      if attributes.key?(:'webhook_idempotency_key')
        self.webhook_idempotency_key = attributes[:'webhook_idempotency_key']
      else
        self.webhook_idempotency_key = nil
      end

      if attributes.key?(:'webhook_timestamp')
        self.webhook_timestamp = attributes[:'webhook_timestamp']
      else
        self.webhook_timestamp = nil
      end

      if attributes.key?(:'link_id')
        self.link_id = attributes[:'link_id']
      else
        self.link_id = nil
      end

      if attributes.key?(:'link_tags')
        if (value = attributes[:'link_tags']).is_a?(Array)
          self.link_tags = value
        end
      else
        self.link_tags = nil
      end

      if attributes.key?(:'webhook_event')
        self.webhook_event = attributes[:'webhook_event']
      else
        self.webhook_event = 'link.state_changed'
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      else
        self.state = nil
      end

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @webhook_idempotency_key.nil?
        invalid_properties.push('invalid value for "webhook_idempotency_key", webhook_idempotency_key cannot be nil.')
      end

      if @webhook_timestamp.nil?
        invalid_properties.push('invalid value for "webhook_timestamp", webhook_timestamp cannot be nil.')
      end

      if @link_id.nil?
        invalid_properties.push('invalid value for "link_id", link_id cannot be nil.')
      end

      if @link_tags.nil?
        invalid_properties.push('invalid value for "link_tags", link_tags cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      webhook_major_version_validator = EnumAttributeValidator.new('Integer', [1])
      return false unless webhook_major_version_validator.valid?(@webhook_major_version)
      webhook_minor_version_validator = EnumAttributeValidator.new('Integer', [0])
      return false unless webhook_minor_version_validator.valid?(@webhook_minor_version)
      return false if @webhook_idempotency_key.nil?
      return false if @webhook_timestamp.nil?
      return false if @link_id.nil?
      return false if @link_tags.nil?
      webhook_event_validator = EnumAttributeValidator.new('String', ["link.state_changed"])
      return false unless webhook_event_validator.valid?(@webhook_event)
      return false if @state.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhook_major_version Object to be assigned
    def webhook_major_version=(webhook_major_version)
      validator = EnumAttributeValidator.new('Integer', [1])
      unless validator.valid?(webhook_major_version)
        fail ArgumentError, "invalid value for \"webhook_major_version\", must be one of #{validator.allowable_values}."
      end
      @webhook_major_version = webhook_major_version
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhook_minor_version Object to be assigned
    def webhook_minor_version=(webhook_minor_version)
      validator = EnumAttributeValidator.new('Integer', [0])
      unless validator.valid?(webhook_minor_version)
        fail ArgumentError, "invalid value for \"webhook_minor_version\", must be one of #{validator.allowable_values}."
      end
      @webhook_minor_version = webhook_minor_version
    end

    # Custom attribute writer method with validation
    # @param [Object] webhook_idempotency_key Value to be assigned
    def webhook_idempotency_key=(webhook_idempotency_key)
      if webhook_idempotency_key.nil?
        fail ArgumentError, 'webhook_idempotency_key cannot be nil'
      end

      @webhook_idempotency_key = webhook_idempotency_key
    end

    # Custom attribute writer method with validation
    # @param [Object] webhook_timestamp Value to be assigned
    def webhook_timestamp=(webhook_timestamp)
      if webhook_timestamp.nil?
        fail ArgumentError, 'webhook_timestamp cannot be nil'
      end

      @webhook_timestamp = webhook_timestamp
    end

    # Custom attribute writer method with validation
    # @param [Object] link_id Value to be assigned
    def link_id=(link_id)
      if link_id.nil?
        fail ArgumentError, 'link_id cannot be nil'
      end

      @link_id = link_id
    end

    # Custom attribute writer method with validation
    # @param [Object] link_tags Value to be assigned
    def link_tags=(link_tags)
      if link_tags.nil?
        fail ArgumentError, 'link_tags cannot be nil'
      end

      @link_tags = link_tags
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] webhook_event Object to be assigned
    def webhook_event=(webhook_event)
      validator = EnumAttributeValidator.new('String', ["link.state_changed"])
      unless validator.valid?(webhook_event)
        fail ArgumentError, "invalid value for \"webhook_event\", must be one of #{validator.allowable_values}."
      end
      @webhook_event = webhook_event
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if state.nil?
        fail ArgumentError, 'state cannot be nil'
      end

      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          webhook_major_version == o.webhook_major_version &&
          webhook_minor_version == o.webhook_minor_version &&
          webhook_idempotency_key == o.webhook_idempotency_key &&
          webhook_timestamp == o.webhook_timestamp &&
          link_id == o.link_id &&
          link_tags == o.link_tags &&
          webhook_event == o.webhook_event &&
          state == o.state &&
          error == o.error &&
          error_message == o.error_message
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [webhook_major_version, webhook_minor_version, webhook_idempotency_key, webhook_timestamp, link_id, link_tags, webhook_event, state, error, error_message].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        ::Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MoneyKit.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
